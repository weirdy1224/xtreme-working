generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ENUMS
//
enum Role {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Status {
  ACCEPTED
  WRONG_ANSWER
  COMPILATION_ERROR
  RUNTIME_ERROR
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  ILLEGAL_SYSTEM_CALL
  INTERNAL_ERROR
  IN_QUEUE
  COMPILING
  RUNNING
}

enum Language {
  JAVA
  PYTHON
  C
  CPP
}

//
// MODELS
//
model User {
  id                           String    @id @default(uuid())
  avatarUrl                    String    @default("https://placehold.co/600x400")
  avatarLocalpath              String    @default("")
  googleId                     String?   @unique
  githubId                     String?   @unique
  username                     String    @unique
  email                        String    @unique
  fullname                     String?
  password                     String?
  role                         Role      @default(USER)
  isEmailVerified              Boolean   @default(false)
  forgotPasswordToken          String?
  forgotPasswordTokenExpiry    DateTime?
  refreshToken                 String?
  emailVerificationToken       String?
  emailVerificationTokenExpiry DateTime?
  rank                         Int?      @default(0)
  problemsSolvedCount          Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  problems      Problem[]
  submission    Submission[]
  problemSolved ProblemSolved[]
}

model Problem {
  id              String     @id @default(uuid())
  title           String
  description     String
  difficulty      Difficulty
  tags            String[]
  userId          String
  examples        Json       // validated as array (2â€“3 items) in backend
  constraints     String
  editorial       String?
  publicTestcases Json       // required (exactly 3 public testcases)
  hiddenTestcases Json?      // optional hidden testcases
  codeSnippets    Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission Submission[]
  solvedBy   ProblemSolved[]
}

model Submission {
  id            String   @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    String   // plain string (instead of Json)
  language      Language
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        Status
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   Problem   @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testCases TestCaseResult[]
}

model TestCaseResult {
  id            String  @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  Submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}
